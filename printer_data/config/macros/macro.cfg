[include startend.cfg]
#[include macros/BuildSheetManager.cfg]
#[include macros/filamentsensor.cfg]
[include m204.cfg]
[include m205.cfg]
[include /home/pi/printer_data/config/K-ShakeTune/*.cfg]
[include purge.cfg]

# Config Header
# Enables extended_macro
[extended_template]
# The path to your extended_template config file.
# If you do not plan on creating your own Python scripts, this is not required.
# See example/function_config.yaml for the configuration schema.
path: /home/pi/printer_data/functions/config.yaml

[gcode_macro Flash_Klipper]
gcode:
    {% set temp = printer.extruder.temperature %}
    { action_respond_info("%s" % (temp)) }
    RUN_SHELL_COMMAND CMD=flash
    
[gcode_shell_command flash]
command: sh //home/pi/printer_data/config/flash.sh
timeout: 30.
verbose: True

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set TARGET_TEMP = printer.heater_bed.target %}
    M140 S0
    _BED_MESH_CALIBRATE {rawparams}
    M140 S{TARGET_TEMP}#

[gcode_macro PROBE_CALIBRATE]
gcode:
    CARTOGRAPHER_CALIBRATE

[gcode_macro Cartographer_Set_Model]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Cartographer Model"
    RESPOND TYPE=command MSG="action:prompt_text Select a model"
    RESPOND TYPE=command MSG="action:prompt_button Default|CARTOGRAPHER_MODEL_SELECT NAME=default|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Hot|CARTOGRAPHER_MODEL_SELECT NAME=hot|secondary"
    RESPOND TYPE=command MSG="action:prompt_button PEI Smooth|CARTOGRAPHER_MODEL_SELECT NAME=PEI Smooth|seconday"
    RESPOND TYPE=command MSG="action:prompt_button PEI Rough|CARTOGRAPHER_MODEL_SELECT NAME=PEI Smooth|seconday"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_show"


# Replacement-Macro to control the Fan with M106 P2 and M107 for BambuStudio
# Macro inspired by klipper-github issue https://github.com/Klipper3d/klipper/issues/2174

[gcode_macro M106]
#rename_existing: G106
gcode:
    {% if params.P is defined %}
        {% if params.P|int == 2 %}
            {% if params.S is defined %}
                {% if params.S|int == 255 %}
                    {% set realspeed = 1 %}
                {% else %}
                    {% if params.S|int == 0 %}
                        {% set realspeed = 0 %}
                    {% else %}
                        {% set realspeed = params.S|float/255 %}
                    {% endif %}
                {% endif %}
            {% else %}
                {% set realspeed = 1 %}
            {% endif %}

            SET_FAN_SPEED FAN=Aux_Fan SPEED={realspeed}
        {% endif %}
  {% else %}
        {% if params.S is defined %}
          SET_FAN_SPEED FAN=fan0 SPEED={params.S|float/255}
        {% else %}
          SET_FAN_SPEED FAN=fan0 SPEED=1
        {% endif %}
    {% endif %}

[shaketune]
result_folder: ~/printer_data/config/ShakeTune_results
#    The folder where the results will be stored. It will be created if it doesn't exist.
number_of_results_to_keep: 3
#    The number of results to keep in the result_folder. The oldest results will
#    be automatically deleted after each runs.
keep_raw_csv: False
#    If True, the raw CSV files will be kept in the result_folder alongside the
#    PNG graphs. If False, they will be deleted and only the graphs will be kept.
show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for "system" macros that are not in the
#    printer.cfg file. If you want to see the macros in the webui, set this to True.
timeout: 300
#    The maximum time in seconds to let Shake&Tune process the CSV files and generate the graphs.

[pause_resume]

[display_status]

[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}

[gcode_macro ALL_OFF]
gcode:
    TURN_OFF_HEATERS
    SET_TEMPERATURE_FAN_TARGET temperature_fan=enclosure_fan target=0
    

[gcode_macro Z_TILT]
gcode:
        G28
        Z_TILT_ADJUST
        G28z
        
[gcode_macro enable_stepper]
gcode:
 SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1

[gcode_macro RSCS_on]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=1
	
[gcode_macro RSCS_off]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=0

[gcode_macro TURN_OFF_MOTORS]
gcode:
    M84

################################
# Power Off
################################
[gcode_macro _POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="VZBot235",
                             state="off")}

[delayed_gcode POWER_OFF_PRINTER_CHECK]
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    {% if printer.extruder.temperature < 50.0 and printer.heater_bed.temperature < 50.0 %}
        {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            _POWER_OFF_PRINTER
        {% else %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
        {% endif %}
    {% else %}
        {% if printer.idle_timeout.state == "Printing" %}
            UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
        {% else %}
            {% if printer.extruder.target == 0.0 and printer.heater_bed.target == 0.0 %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=2
            {% else %}
                UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=0
            {% endif %}
        {% endif %}
    {% endif %}
  {% endif %}

[gcode_macro ACTIVATE_POWER_OFF]
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60

[gcode_macro DEACTIVATE_POWER_OFF]
gcode:
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=0

[delayed_gcode POWER_OFF_PRINTER_CHECK_ACT]
gcode:
  {% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK DURATION=30
  {% else %}
    UPDATE_DELAYED_GCODE ID=POWER_OFF_PRINTER_CHECK_ACT DURATION=60
  {% endif %}


################################
############# M201 #############
################################
[gcode_macro m201]
description: Sets maximum accelleration.
  Usage: M201 [X<accel>] [Y<accel>]
variable_max_accel: 1.7976931348623157e+308
gcode:
  {% set km = printer["gcode_macro _km_globals"] %}
  {% if 'X' in params or 'Y' in params %}
    {% set accel = (params.X|default(params.Y)|float,
                    params.Y|default(params.X)|float)|min %}
    SET_GCODE_VARIABLE MACRO=m201 VARIABLE=max_accel VALUE="{accel}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

################################
############# M203 #############
################################
[gcode_macro m203]
description: Sets maximum velocity.
  Usage: M203 [X<velocity>] [Y<velocity>]
gcode:
  {% if 'X' in params or 'Y' in params %}
    {% set velocity = (params.X|default(params.Y)|float,
                       params.Y|default(params.X)|float)|min %}
    SET_VELOCITY_LIMIT VELOCITY="{velocity}"
  {% else %}
    SET_VELOCITY_LIMIT
  {% endif %}

#####################################
#          PID Tune Macros          #
#       Version 1.0  2023-1-30      #
#####################################

################################
######### PID_EXTRUDER #########
################################
[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  {% set e = printer.toolhead.extruder %}
  {% set T = params.TEMPERATURE|default(230)|float %}
  {% set S = params.FAN_IN_PERCENT|default(0)|float *2.55 %}
  {% set P = printer.configfile.config[e].pid_kp|float %}
  {% set I = printer.configfile.config[e].pid_ki|float %}
  {% set D = printer.configfile.config[e].pid_kd|float %}
  M106 S{S}
  M118 // PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  (old)
  PID_CALIBRATE HEATER={e} TARGET={T}
  TURN_OFF_HEATERS
  SAVE_CONFIG
 
################################
############ PID_BED ###########
################################
[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  {% set T = params.TEMPERATURE|default(80)|float %}
  {% set P = printer.configfile.config['heater_bed'].pid_kp|float %}
  {% set I = printer.configfile.config['heater_bed'].pid_ki|float %}
  {% set D = printer.configfile.config['heater_bed'].pid_kd|float %}
  M118 // PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  (old)
  PID_CALIBRATE HEATER=heater_bed TARGET={T}
  TURN_OFF_HEATERS
  SAVE_CONFIG


[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  100
variable_purge_distance:  50
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  100
variable_purge_distance:  50
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

  # tested with klipper version v0.11.0-276 or higher.

[gcode_macro _USER_VARIABLES]
# This macro allows you to set some user variables for your specific printer structure.
# Currently supported: "cartesian" and "corexy". 

################################################
###########  SET YOUR VARIABLE  ################
#variable_structure: "cartesian"
variable_structure: "corexy"
################################################
################################################

## Do not remove this line
gcode:


[gcode_macro _step_error]
# This macro triggers an error message when skipped steps are detected.
gcode:  
    {action_raise_error("SKIPPED STEPS DETECTED!")}


[gcode_macro _store_mcu_position]
# This macro stores the current position of a specified stepper motor in a variable named mcu_position. 
# This stored position can be accessed later for purposes such as comparing the current position 
# of the stepper motor to its position at a prior time.
variable_mcu_position_x: 0
variable_mcu_position_y: 0 
gcode:
  SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_x VALUE={printer.endstop_phase.last_home.stepper_x.mcu_position}
  SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_y VALUE={printer.endstop_phase.last_home.stepper_y.mcu_position}  


[gcode_macro _compare_mcu_position]
# This macro compares the previously stored position (saved in _store_mcu_position macro) of the specified stepper motor with its current position. 
# If the difference between the two positions exceeds the number of microsteps set in the printer 
# settings for that stepper, it outputs a warning message and resets the velocity limit to maximum values. 
# In addition, the _step_error macro is called.
# If no step differences are detected, a corresponding message is output.

gcode:
    {% set structure = params.STRUCTURE|default(printer["gcode_macro _USER_VARIABLES"].structure)|string|lower %}
    {% set config = printer.configfile.settings %}
    {% set old_position_x = printer["gcode_macro _store_mcu_position"].mcu_position_x|int %}
    {% set old_position_y = printer["gcode_macro _store_mcu_position"].mcu_position_y|int %}
    {% set new_position_x = printer.endstop_phase.last_home.stepper_x.mcu_position %}
    {% set new_position_y = printer.endstop_phase.last_home.stepper_y.mcu_position %}
    SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_x VALUE={new_position_x}
    SET_GCODE_VARIABLE MACRO=_store_mcu_position VARIABLE=mcu_position_y VALUE={new_position_y}
    {% if (old_position_x - new_position_x)|abs > printer.configfile.settings["stepper_x"]["microsteps"] or (old_position_y - new_position_y)|abs > printer.configfile.settings["stepper_y"]["microsteps"] %} 
        {% if structure == "cartesian" %}
            M118 Step difference - X: {old_position_x - new_position_x}, Y: {old_position_y - new_position_y}
        {% else %}
            M118 Step difference - B: {old_position_x - new_position_x}, A: {old_position_y - new_position_y}
        {% endif %}
        SET_VELOCITY_LIMIT VELOCITY={config.printer.max_velocity} ACCEL={config.printer.max_accel} ACCEL_TO_DECEL={config.printer.max_accel_to_decel}
        _step_error
    {% else %}
        {% if structure == "cartesian" %}
            M118 Step difference - Stepper X: {old_position_x - new_position_x}, Stepper Y: {old_position_y - new_position_y}
        {% else %}
            M118 Step difference - Stepper B: {old_position_x - new_position_x}, Stepper A: {old_position_y - new_position_y}
        {% endif %}
        M118 No skipped steps detected.
    {% endif %}

[gcode_macro MAX_ACCEL_TEST]
# This macro performs a test to find the maximum acceleration of a 3D printer along the X and Y axes.
# Created by Fragmon [crydteam]
# Version 1.0

# Description: 
# MAX_ACCEL_TEST is a G-code macro designed to examine the maximum acceleration a 3D printer can achieve along the X and Y axes. 
# The macro executes a series of movements at various acceleration levels, providing insights into printer performance at these rates.
# It makes use of several parameters for test customization:
# - MIN_ACCEL: The initial acceleration for the test, defaults to 100 mm/s^2.
# - MAX_ACCEL: The maximum acceleration for the test, defaults to 1000 mm/s^2.
# - ACCEL_INCREMENT: The increment of acceleration for each test step, defaults to 100 mm/s^2.
# - AXIS: The axis along which the test should be performed, defaults to "X".
# - SPEED: The speed to be used during the test, defaults to the printer's max velocity setting.
# - REPEAT: The number of round trip movements to be performed at each velocity step, defaults to 50.
# Throughout the test, the macro will go through the specified acceleration range, perform the test movements, and display the current speed and acceleration values.
# Upon completion, it will restore the printer's initial acceleration settings and home all axes.

gcode:
    # Set default values for the parameters
    {% set config = printer.configfile.settings %}
    {% set min_accel = params.MIN_ACCEL|default(10)|int %}
    {% set max_accel = params.MAX_ACCEL|default(300)|int %}
    {% set limit_accel = 75000 %}
    {% set accel_increment = params.ACCEL_INCREMENT|default(100)|int %}
    {% set axis = params.AXIS|default("X")|upper %}
    {% set velocity = params.SPEED|default(config.printer["max_velocity"])|float %}
    {% set repeat = params.REPEAT|default(50)|int %}

    # Check if the min_accel and max_accel values are within the allowed limit
    {% if min_accel > max_accel %}
        { action_raise_error("Minimum acceleration is greater than maximum acceleration.") } 
    {% elif max_accel > limit_accel %}
        { action_raise_error("Maximum acceleration is greater than limit.") } 
    {% endif %}
   
    # Calculate the max, min and midpoint of the X and Y axes
    {% set stepper = "stepper_" + axis|lower %}
    {% set stepper_config = config[stepper] %}
    {% set axis_min = stepper_config["position_min"]|float %}
    {% set axis_max = stepper_config["position_max"]|float %}
    {% set max_axis_margin = 0.1 * (axis_max - axis_min) %}
    {% set axis_margin = 20 if 20 < max_axis_margin else max_axis_margin %}

    {% set axis_min = axis_min + axis_margin %}
    {% set axis_max = axis_max - axis_margin %}
    {% set axis_range = axis_max - axis_min %}
    {% set axis_mid = (axis_min + axis_max) / 2.0 %}

    {% if (velocity ** 2) / min_accel > axis_range %}
        { action_raise_error("Not enough distance on the axis for cruising. Either increase MIN_ACCEL or decrease VELOCITY.") }
    {% endif %}

    # Home the axis, store the step position, and set the limits for the test
    G28                                                                             
    G28 X Y                                                                          
    _store_mcu_position                                                              
    G1 X{axis_mid} Y{axis_mid} Z20

    # Loop through the specified range of accelerations
    {% for accel in range(min_accel, max_accel + 1, accel_increment) %}
        # Set the acceleration
        SET_VELOCITY_LIMIT VELOCITY={velocity} ACCEL={accel} ACCEL_TO_DECEL={accel}

        # Display the current speed and acceleration values
        M118 Velocity / Acceleration: {velocity} mm/s / {accel} mm/s2
        
        # Perform i test movements for the specified axis
        {% for i in range(repeat) %}
            # Calculate a random distance for the test movement
            {% set min_distance = (velocity ** 2) / accel %}
            {% set max_distance = 4 * min_distance %}
            {% set max_distance = max_distance if max_distance < axis_range else axis_range %}
            {% set movement_distance = (range(min_distance|int * 100, max_distance|int * 100)|random) / 100 %}

            # Execute test movements
            G1 {axis}{ axis_mid - movement_distance / 2 } F{ velocity * 60 }
            G1 {axis}{ axis_mid + movement_distance / 2 }
            G1 {axis}{ axis_mid }
        {% endfor %}

        # Home the axis, verify the step position
        G28 X Y
        _compare_mcu_position STEPPER={stepper}
        G1 X{axis_mid} Y{axis_mid}
    {% endfor %}
        
    # Reset the initial limits
    SET_VELOCITY_LIMIT VELOCITY={config.printer.max_velocity} ACCEL={config.printer.max_accel} ACCEL_TO_DECEL={config.printer.max_accel_to_decel}       
